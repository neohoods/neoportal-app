openapi: 3.0.1
info:
  title: portal NeoHoods API
  version: "2.0"
  description: |
    # Summary
    portal NeoHoods API

servers:
  - url: https://portal.neohoods.com
    description: portal neohoods API

paths:
  /public/auth/login:
    post:
      operationId: login
      summary: Log user with username / password
      tags:
        - auth-api

      security:
        - BearerAuthOAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "my-login"
                password:
                  type: string
                  example: "my-password"
              required:
                - username
                - password

      responses:
        "200":
          $ref: "#/components/responses/OK_200_LOGIN"

  /public/auth/signup:
    post:
      operationId: signUp
      summary: Register a new user
      tags:
        - auth-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newuser"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "newuser@example.com"
                type:
                  $ref: "#/components/schemas/UserType"
                password:
                  type: string
                  example: "securepassword"

              required:
                - username
                - firstName
                - lastName
                - email
                - type
                - password
      responses:
        "201":
          description: User registered successfully
        "400":
          $ref: "#/components/responses/BadRequest"

  /public/auth/signout:
    post:
      operationId: signOut
      summary: Sign out the current user
      tags:
        - auth-api
      responses:
        "204":
          description: User signed out successfully

  /public/auth/reset-password:
    post:
      operationId: resetPassword
      summary: Reset password for a user
      tags:
        - auth-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
              required:
                - email
      responses:
        "200":
          description: Password reset email sent
        "404":
          $ref: "#/components/responses/NotFound"

  /public/auth/reset-password/confirm:
    post:
      operationId: confirmResetPassword
      summary: Confirm password reset with token
      tags:
        - auth-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "reset-token-123"
                newPassword:
                  type: string
                  example: "newSecurePassword"
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /public/auth/email-verification:
    post:
      operationId: verifyEmail
      summary: Verify user's email with token
      tags:
        - auth-api
      parameters:
        - name: token
          in: query
          description: Email verification token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Email verification response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email verified successfully"
        "400":
          $ref: "#/components/responses/BadRequest"

  /hub/hello-world:
    get:
      operationId: getHelloWorld
      summary: hello world
      tags:
        - hello-world-api

      security:
        - BearerAuthOAuth: []

      responses:
        "200":
          $ref: "#/components/responses/OK_200_GET_HELLO_WORLD"

  /hub/profile:
    get:
      operationId: getProfile
      summary: Get the current user's profile
      tags:
        - profile-hub-api
      responses:
        "200":
          description: get profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      operationId: updateProfile
      summary: Update the current user's profile
      tags:
        - profile-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "404":
          description: User not found

  /hub/announcements:
    post:
      operationId: createAnnouncement
      summary: Create a new announcement
      tags:
        - announcements-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Announcement"
                content:
                  type: string
                  example: "This is the content of the announcement."
                category:
                  $ref: "#/components/schemas/AnnouncementCategory"
              required:
                - title
                - content
                - category
      responses:
        "201":
          description: Announcement created successfully

    get:
      operationId: getAnnouncements
      summary: Retrieve all announcements
      tags:
        - announcements-hub-api
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of announcements per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A paginated list of announcements
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAnnouncementsResponse"

  /hub/announcements/{announcement-id}:
    parameters:
      - name: announcement-id
        in: path
        description: Announcement ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getAnnouncement
      summary: Retrieve a specific announcement by ID
      tags:
        - announcements-hub-api
      responses:
        "200":
          description: A single announcement
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"

    put:
      operationId: updateAnnouncement
      summary: Update an existing announcement
      tags:
        - announcements-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Announcement"
                content:
                  type: string
                  example: "This is the updated content of the announcement."
              required:
                - title
                - content
      responses:
        "200":
          description: Announcement updated successfully

    delete:
      operationId: deleteAnnouncement
      summary: Delete an announcement
      tags:
        - announcements-hub-api
      responses:
        "204":
          description: Announcement deleted successfully

  /hub/infos:
    put:
      operationId: updateInfos
      summary: Update infos
      tags:
        - infos-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Info"
      responses:
        "200":
          description: Infos updated successfully

    get:
      operationId: getInfos
      summary: Retrieve all infos
      tags:
        - infos-hub-api
      responses:
        "200":
          description: A list of infos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"

  /hub/applications:
    post:
      operationId: createApplication
      summary: Create a new application
      tags:
        - applications-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Application"
      responses:
        "201":
          description: App created successfully

    get:
      operationId: getApplications
      summary: Retrieve all applications
      tags:
        - applications-hub-api
      responses:
        "200":
          description: A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"

  /hub/applications/{application-id}:
    parameters:
      - name: application-id
        in: path
        description: Application ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getApplication
      summary: Retrieve a specific application by ID
      tags:
        - applications-hub-api
      responses:
        "200":
          description: A single application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"

    put:
      operationId: updateApplication
      summary: Update an existing application
      tags:
        - applications-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Application"
      responses:
        "200":
          description: Application updated successfully

    delete:
      operationId: deleteApplication
      summary: Delete an application
      tags:
        - applications-hub-api
      responses:
        "204":
          description: Application deleted successfully

  /hub/custom-pages/:
    get:
      operationId: getCustomPageRefs
      summary: Retrieve all custom page references
      tags:
        - custom-pages-hub-api
      responses:
        "200":
          description: A list of custom page references with position and title
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ref:
                      type: string
                    position:
                      type: string
                      enum: ["footer-links", "copyright", "footer-help"]
                    title:
                      type: string

  /hub/custom-pages/{page-ref}:
    parameters:
      - name: page-ref
        in: path
        description: Reference of the custom page
        required: true
        schema:
          type: string
    get:
      operationId: getCustomPage
      summary: Retrieve a custom page by reference
      tags:
        - custom-pages-hub-api
      responses:
        "200":
          description: A single custom page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

  /admin/custom-pages:
    get:
      operationId: getAdminCustomPages
      summary: Retrieve all custom pages
      tags:
        - custom-pages-admin-api
      responses:
        "200":
          description: A list of custom pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomPage"

    post:
      operationId: createCustomPage
      summary: Create a new custom page
      tags:
        - custom-pages-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPage"
      responses:
        "201":
          description: Custom page created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"

  /admin/custom-pages/{page-ref}:
    parameters:
      - name: page-ref
        in: path
        description: Reference of the custom page
        required: true
        schema:
          type: string
    get:
      operationId: getAdminCustomPage
      summary: Retrieve a specific custom page by reference
      tags:
        - custom-pages-admin-api
      responses:
        "200":
          description: A single custom page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

    put:
      operationId: updateCustomPage
      summary: Update a custom page
      tags:
        - custom-pages-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPage"
      responses:
        "200":
          description: Custom page updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPage"
        "404":
          description: Custom page not found

    delete:
      operationId: deleteCustomPage
      summary: Delete a custom page
      tags:
        - custom-pages-admin-api
      responses:
        "204":
          description: Custom page deleted successfully
        "404":
          description: Custom page not found

  /admin/help/categories:
    get:
      operationId: getAdminHelpCategories
      summary: Retrieve all help categories
      tags:
        - help-admin-api
      responses:
        "200":
          description: A list of help categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpCategory"
    post:
      operationId: createHelpCategory
      summary: Create a new help category
      tags:
        - help-admin-api
      requestBody:
        description: The category to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpCategory"
      responses:
        "201":
          description: Help category created successfully
    delete:
      operationId: deleteHelpCategory
      summary: Delete a help category
      tags:
        - help-admin-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Help category deleted successfully
    put:
      operationId: updateHelpCategory
      summary: Update a help category
      tags:
        - help-admin-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated category data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpCategory"
      responses:
        "200":
          description: Help category updated successfully

  /admin/help/articles:
    get:
      operationId: getAdminHelpArticles
      summary: Retrieve help articles by category ID
      tags:
        - help-admin-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to filter articles
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of help articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpArticle"
    post:
      operationId: createHelpArticle
      summary: Create a new help article
      tags:
        - help-admin-api
      requestBody:
        description: The article to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpArticle"
      responses:
        "201":
          description: Help article created successfully
    delete:
      operationId: deleteHelpArticle
      summary: Delete a help article
      tags:
        - help-admin-api
      parameters:
        - name: articleId
          in: query
          description: The ID of the article to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Help article deleted successfully
    put:
      operationId: updateHelpArticle
      summary: Update a help article
      tags:
        - help-admin-api
      parameters:
        - name: articleId
          in: query
          description: The ID of the article to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated article data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelpArticle"
      responses:
        "200":
          description: Help article updated successfully

  /hub/help/categories:
    get:
      operationId: getHelpCategories
      summary: Retrieve all help categories
      tags:
        - help-api
      responses:
        "200":
          description: A list of help categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpCategory"

  /hub/help/articles:
    get:
      operationId: getHelpArticles
      summary: Retrieve help articles by category ID
      tags:
        - help-api
      parameters:
        - name: categoryId
          in: query
          description: The ID of the category to filter articles
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of help articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HelpArticle"

  /admin/users:
    get:
      operationId: getUsers
      summary: Retrieve all users
      tags:
        - users-admin-api
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      operationId: saveUser
      summary: Save a user
      tags:
        - users-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /admin/users/{user-id}:
    parameters:
      - name: user-id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getUser
      summary: Retrieve a specific user by ID
      tags:
        - users-admin-api
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /admin/users/{user-id}/password:
    parameters:
      - name: user-id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: setUserPassword
      summary: Set a user's password
      tags:
        - users-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: "newSecurePassword"
              required:
                - newPassword
      responses:
        "204":
          description: Password updated successfully

  /admin/settings/security:
    get:
      operationId: getSecuritySettings
      summary: Retrieve security settings
      tags:
        - settings-admin-api
      responses:
        "200":
          description: Security settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRegistrationEnabled:
                    type: boolean
                    example: true
                  ssoEnabled:
                    type: boolean
                    example: false
                  ssoClientId:
                    type: string
                    example: "my-client-id"
                  ssoClientSecret:
                    type: string
                    example: "my-client-secret"
                  ssoTokenEndpoint:
                    type: string
                    example: "https://openid.example.com/token"
                  ssoAuthorizationEndpoint:
                    type: string
                    example: "https://openid.example.com/authorize"
                  ssoScope:
                    type: string
                    example: "openid profile email"
    post:
      operationId: saveSecuritySettings
      summary: Save security settings
      tags:
        - settings-admin-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isRegistrationEnabled:
                  type: boolean
                  example: false
                ssoEnabled:
                  type: boolean
                  example: false
                ssoClientId:
                  type: string
                  example: "my-client-id"
                ssoClientSecret:
                  type: string
                  example: "my-client-secret"
                ssoTokenEndpoint:
                  type: string
                  example: "https://openid.example.com/token"
                ssoAuthorizationEndpoint:
                  type: string
                  example: "https://openid.example.com/authorize"
                ssoScope:
                  type: string
                  example: "openid profile email"
      responses:
        "200":
          description: Security settings saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRegistrationEnabled:
                    type: boolean
                    example: false
                  ssoEnabled:
                    type: boolean
                    example: false
                  ssoClientId:
                    type: string
                    example: "my-client-id"
                  ssoClientSecret:
                    type: string
                    example: "my-client-secret"
                  ssoTokenEndpoint:
                    type: string
                    example: "https://openid.example.com/token"
                  ssoAuthorizationEndpoint:
                    type: string
                    example: "https://openid.example.com/authorize"
                  ssoScope:
                    type: string
                    example: "openid profile email"

  /public/settings:
    get:
      operationId: getPublicSettings
      summary: Retrieve public UI settings
      tags:
        - settings-public-api
      responses:
        "200":
          description: Public UI settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRegistrationEnabled:
                    type: boolean
                    example: true
                  ssoEnabled:
                    type: boolean
                    example: false

  /public/sso/login-url:
    post:
      operationId: generateSSOLoginUrl
      summary: Generate the SSO login URL
      tags:
        - sso-public-api
      responses:
        "200":
          description: SSO login URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  loginUrl:
                    type: string
                    example: true

  /public/sso/token-exchange:
    post:
      operationId: exchangeSSOToken
      summary: Exchange the SSO token for a JWT token
      tags:
        - sso-public-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                authorizationCode:
                  type: string
              required:
                - state
                - authorizationCode
      responses:
        "200":
          description: SSO token exchanged successfully

  /debug/notifications:
    post:
      operationId: debugPostNotification
      summary: Debug endpoint to create a notification for a specific user
      tags:
        - debug-api
      security:
        - BearerAuthOAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - notification
              properties:
                locale:
                  type: string
                  example: "en"
                  description: The locale of the notification
                userId:
                  type: string
                  format: uuid
                  description: The ID of the user to send the notification to
                notification:
                  $ref: "#/components/schemas/Notification"
                  description: The notification to send
      responses:
        "201":
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "404":
          description: User not found
        "400":
          description: Invalid notification payload

  /hub/notifications:
    get:
      operationId: getNotifications
      summary: Retrieve all notifications
      tags:
        - notifications-hub-api
      responses:
        "200":
          description: A list of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"

  /hub/notifications/unread-count:
    get:
      operationId: getUnreadNotificationsCount
      summary: Retrieve the count of unread notifications
      tags:
        - notifications-hub-api
      responses:
        "200":
          description: Count of unread notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 5

  /hub/notifications/acknowledge:
    post:
      operationId: acknowledgeNotifications
      summary: Acknowledge notifications as read
      tags:
        - notifications-hub-api
      requestBody:
        description: List of notifications to acknowledge
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Notification"
      responses:
        "204":
          description: Notifications acknowledged successfully

  /hub/notifications-settings:
    get:
      operationId: getNotificationSettings
      summary: Get the current user's notification settings
      tags:
        - notifications-hub-api
      responses:
        "200":
          description: Notification settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
        "401":
          description: Unauthorized
    put:
      operationId: updateNotificationSettings
      summary: Update the current user's notification settings
      tags:
        - notifications-hub-api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSettings"
      responses:
        "200":
          description: Notification settings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

components:
  #####################################################
  # Predefined Components
  #####################################################

  securitySchemes:
    BearerAuthOAuth:
      description: Bearer Token.
      type: http
      scheme: bearer

  parameters:
    itemId:
      name: item-id
      in: path
      description: Item ID
      required: true
      schema:
        type: string
        format: uuid
    userId:
      name: user-id
      in: path
      description: User ID
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - isEmailVerified
        - disabled
        - type
        - properties
        - streetAddress
        - city
        - postalCode
        - country
      properties:
        id:
          type: string
          format: uuid
        disabled:
          type: boolean
        isEmailVerified:
          type: boolean
        username:
          type: string
        avatarUrl:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        flatNumber:
          type: string
          example: A701
        roles:
          type: array
          items:
            type: string
            example: "admin"
        streetAddress:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
        preferredLanguage:
          type: string
          example: "en"
        type:
          $ref: "#/components/schemas/UserType"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"

    UserType:
      type: string
      enum:
        - ADMIN
        - OWNER
        - LANDLORD
        - TENANT
        - SYNDIC
        - EXTERNAL
        - CONTRACTOR
        - COMMERCIAL_PROPERTY_OWNER
        - GUEST
      example: "OWNER"

    Property:
      type: object
      required:
        - type
        - name
      properties:
        type:
          $ref: "#/components/schemas/PropertyType"
        name:
          type: string
          example: "Apartment 3A"

    PropertyType:
      type: string
      enum:
        - APARTMENT
        - GARAGE
        - PARKING
        - COMMERCIAL
        - OTHER
      example: "APARTMENT"

    Location:
      type: object
      required:
        - name
        - address
        - coordinates
      properties:
        name:
          type: string
        address:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number

    CodedError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: A unique error code that identifies the type of error
          example: AUTH001
        message:
          type: string
          description: A human-readable error message
          example: The specified user could not be found
        traceId:
          type: string
          description: A unique identifier for tracing this error instance
          example: 550e8400-e29b-41d4-a716-446655440000
        documentationUrl:
          type: string
          description: URL to the documentation about this error
          example: https://docs.portal.neohoods.com/errors/AUTH001
        variables:
          type: object
          additionalProperties: true
          description: Additional context variables for the error
          example:
            field: "email"
            value: "invalid@email"

    ValidationFieldError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: The field that failed validation
          example: email
        message:
          type: string
          description: The validation error message
          example: must be a valid email

    ValidationError:
      allOf:
        - $ref: "#/components/schemas/CodedError"
        - type: object
          properties:
            variables:
              type: object
              required:
                - fields
              properties:
                fields:
                  type: array
                  items:
                    $ref: "#/components/schemas/ValidationFieldError"

    NotificationSettings:
      type: object
      properties:
        enableNotifications:
          type: boolean
          description: Whether notifications are enabled for the user
      required:
        - enableNotifications

    HelpCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        icon:
          type: string
        order:
          type: integer
          description: The order of the help category

    HelpArticle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        category:
          $ref: "#/components/schemas/HelpCategory"
        order:
          type: integer
          description: The order of the help article

    CustomPage:
      type: object
      required:
        - id
        - ref
        - position
        - title
        - content
      properties:
        id:
          type: string
          format: uuid
        ref:
          type: string
        order:
          type: integer
        position:
          type: string
          enum: ["footer-links", "copyright", "footer-help"]
        title:
          type: string
        content:
          type: string

    Announcement:
      type: object
      required:
        - id
        - title
        - content
        - createdAt
        - updatedAt
        - category
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: "New Announcement"
        content:
          type: string
          example: "This is the content of the announcement."
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        category:
          $ref: "#/components/schemas/AnnouncementCategory"

    AnnouncementCategory:
      type: string
      enum:
        - CommunityEvent
        - LostAndFound
        - SafetyAlert
        - MaintenanceNotice
        - SocialGathering
        - Other
      example: "CommunityEvent"

    PaginatedAnnouncementsResponse:
      type: object
      required:
        - totalPages
        - totalItems
        - currentPage
        - itemsPerPage
        - announcements
      properties:
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        currentPage:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 10
        announcements:
          type: array
          items:
            $ref: "#/components/schemas/Announcement"

    Notification:
      type: object
      required:
        - id
        - author
        - date
        - type
        - alreadyRead
      properties:
        id:
          type: string
          format: uuid
        author:
          type: string
          example: "system"
        date:
          type: string
          format: date-time
          example: "2023-11-15T13:45:30"
        type:
          type: string
          enum:
            - ADMIN_NEW_USER
        alreadyRead:
          type: boolean
          example: false
        payload:
          type: object
          additionalProperties: true

    Info:
      type: object
      required:
        - id
        - nextAGDate
        - rulesUrl
        - delegates
        - contactNumbers
      properties:
        id:
          type: string
          format: uuid
        nextAGDate:
          type: string
          format: date
        rulesUrl:
          type: string
        delegates:
          type: array
          items:
            $ref: "#/components/schemas/Delegate"
        contactNumbers:
          type: object
          properties:
            syndic:
              $ref: "#/components/schemas/ContactNumber"
            emergency:
              type: array
              items:
                $ref: "#/components/schemas/ContactNumber"

    Delegate:
      type: object
      properties:
        building:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        matrixUser:
          type: string

    ContactNumber:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        availability:
          type: string
          example: "24/7"
        responseTime:
          type: string
          example: "5-10 minutes"
        name:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        officeHours:
          type: string
          example: "Mon-Fri 9am-5pm"
        address:
          type: string
          example: "123 Main St, Neighborhood City"

    Application:
      type: object
      required:
        - id
        - name
        - url
        - icon
        - helpText
      properties:
        id:
          type: string
          format: uuid
        disabled:
          type: boolean
          default: false
        name:
          type: string
        url:
          type: string
        icon:
          type: string
        helpText:
          type: string

  responses:
    OK_200_GET_HELLO_WORLD:
      description: OK
      content:
        application/json:
          schema:
            title: responseHelloWorld
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: "Hello world!"
    OK_200_LOGIN:
      description: Logged in user details
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
            example:
              id: "123e4567-e89b-12d3-a456-426614174000"
              username: "my-login"
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
              flatNumber: "A701"
              isEmailVerified: true
              disabled: false
              type: "OWNER"
              properties:
                - type: "APARTMENT"
                  name: "Apartment 3A"
              streetAddress: "123 Main Street"
              city: "Downtown"
              postalCode: "12345"
              country: "USA"
    BadRequest:
      description: Bad Request - The request was invalid or cannot be served
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          examples:
            validation_error:
              value:
                code: VAL001
                message: Validation failed
                variables:
                  fields:
                    - field: email
                      message: must be a valid email
            invalid_input:
              value:
                code: VAL002
                message: Missing required field
                variables:
                  field: username
    Unauthorized:
      description: Unauthorized - Authentication is required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: AUTH001
            message: Authentication required
            documentationUrl: https://docs.portal.neohoods.com/errors/AUTH001
    Forbidden:
      description: Forbidden - No permission to access the resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: AUTH005
            message: You don't have sufficient permissions to perform this action
    NotFound:
      description: Not Found - The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: RES001
            message: The requested resource was not found
    ValidationError:
      description: Validation Error - The request data failed validation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
          example:
            code: VAL001
            message: Validation failed
            variables:
              fields:
                - field: email
                  message: must be a valid email
                - field: password
                  message: must be at least 8 characters
    InternalServerError:
      description: Internal Server Error - Something went wrong on the server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CodedError"
          example:
            code: SYS001
            message: An unexpected error occurred
